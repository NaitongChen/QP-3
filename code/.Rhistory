ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red")
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue")
d2
df2
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue") +
geom_point(aes(size, medians), df3, color="green") +
geom_errorbar(aes(x = df3$size, ymin = df3$first_q, ymax = df3$third_q), color="green") +
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue") +
geom_point(aes(size, medians), df3, color="green") +
geom_errorbar(aes(x = df3$size, ymin = df3$first_q, ymax = df3$third_q), color="green") +
ylab(metric)
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue")
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue") +
geom_point(aes(size, medians), df3, color="green")
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue") +
geom_point(aes(size, medians), df3, color="green") +
geom_errorbar(aes(x = df3$size, ymin = df3$first_q, ymax = df3$third_q), color="green")
ggplot() +
geom_point(aes(size, medians), df1, color="red") +
geom_errorbar(aes(x = df1$size, ymin = df1$first_q, ymax = df1$third_q), color="red") +
geom_point(aes(size, medians), df2, color="blue") +
geom_errorbar(aes(x = df2$size, ymin = df2$first_q, ymax = df2$third_q), color="blue") +
geom_point(aes(size, medians), df3, color="green") +
geom_errorbar(aes(x = df3$size, ymin = df3$first_q, ymax = df3$third_q), color="green") +
ylab(metric)
df2
df3
# load helper functions
setwd("C:/projects/Qualifying papers/QP-3/code")
source("helpers.R")
library(torch)
# set parameters
p = 20
ns = c(10, 20, 50, 100)
beta = rep(0, p)
beta[1] = 1
beta[2] = -1
beta[19] = 1
beta[20] = -1
signal = 1
mu_x = 0
sigma_x = 1
sigma_ys = c(0.25, 0.5, 1, 2)
a = 0.5
sig = 0.05
n_trial = 20
methods = c("split", "p1", "p2")
metrics = c("power", "precision", "len", "FCR", "L2")
tau = 1
# load helper functions
setwd("C:/projects/Qualifying papers/QP-3/code")
source("helpers.R")
library(torch)
# set parameters
p = 20
ns = c(10, 20, 50, 100)
beta = rep(0, p)
beta[1] = 1
beta[2] = -1
beta[19] = 1
beta[20] = -1
signal = 1
mu_x = 0
sigma_x = 1
sigma_ys = c(0.25, 0.5, 1, 2)
a = 0.5
sig = 0.05
n_trial = 20
methods = c("split", "p1", "p2")
metrics = c("power", "precision", "len", "FCR", "L2")
tau = 1
for (k in 1:length(sigma_ys)) {
# split
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] =  as_array(pow_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(pow_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(pow_p2[i,k,][idx])
}
plot_metric(trial, methods, ns, sigma_ys[k], metrics[1], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(prec_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(prec_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(prec_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[2], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(len_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(len_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(len_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[3], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(fcr_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(fcr_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(fcr_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[4], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(l2_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(l2_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(l2_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[5], dat1, dat2, dat3)
}
# load helper functions
setwd("C:/projects/Qualifying papers/QP-3/code")
source("helpers.R")
library(torch)
# set parameters
p = 20
ns = c(10, 20, 50, 100)
beta = rep(0, p)
beta[1] = 1
beta[2] = -1
beta[19] = 1
beta[20] = -1
signal = 1
mu_x = 0
sigma_x = 1
sigma_ys = c(0.25, 0.5, 1, 2)
a = 0.5
sig = 0.05
n_trial = 20
methods = c("split", "p1", "p2")
metrics = c("power", "precision", "len", "FCR", "L2")
tau = 1
for (k in 1:length(sigma_ys)) {
# split
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] =  as_array(pow_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(pow_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(pow_p2[i,k,][idx])
}
plot_metric(trial, methods, ns, sigma_ys[k], metrics[1], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(prec_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(prec_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(prec_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[2], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(len_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(len_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(len_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[3], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(fcr_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(fcr_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(fcr_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[4], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(l2_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(l2_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(l2_p2[i,k,][idx])
}
plot_metric(trial, methods[1], ns, sigma_ys[k], metrics[5], dat1, dat2, dat3)
}
k
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] =  as_array(pow_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(pow_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(pow_p2[i,k,][idx])
}
plot_metric(trial, methods, ns, sigma_ys[k], metrics[1], dat1, dat2, dat3)
# load helper functions
setwd("C:/projects/Qualifying papers/QP-3/code")
source("helpers.R")
library(torch)
# set parameters
p = 20
ns = c(10, 20, 50, 100)
beta = rep(0, p)
beta[1] = 1
beta[2] = -1
beta[19] = 1
beta[20] = -1
signal = 1
mu_x = 0
sigma_x = 1
sigma_ys = c(0.25, 0.5, 1, 2)
a = 0.5
sig = 0.05
n_trial = 20
methods = c("split", "p1", "p2")
metrics = c("power", "precision", "len", "FCR", "L2")
tau = 1
for (k in 1:length(sigma_ys)) {
# split
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] =  as_array(pow_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(pow_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(pow_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[1], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(prec_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(prec_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(prec_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[2], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(len_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(len_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(len_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[3], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(fcr_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(fcr_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(fcr_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[4], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(l2_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(l2_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(l2_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[5], dat1, dat2, dat3)
}
# load helper functions
setwd("C:/projects/Qualifying papers/QP-3/code")
source("helpers.R")
library(torch)
# set parameters
p = 20
ns = c(10, 20, 50, 100)
beta = rep(0, p)
beta[1] = 1
beta[2] = -1
beta[19] = 1
beta[20] = -1
signal = 1
mu_x = 0
sigma_x = 1
sigma_ys = c(0.25, 0.5, 1, 2)
a = 0.5
sig = 0.05
n_trial = 20
methods = c("split", "p1", "p2")
metrics = c("power", "precision", "len", "FCR", "L2")
tau = 1
for (k in 1:length(sigma_ys)) {
# split
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] =  as_array(pow_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(pow_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(pow_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[1], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(prec_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(prec_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(prec_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[2], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(len_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(len_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(len_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[3], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(fcr_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(fcr_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(fcr_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[4], dat1, dat2, dat3)
dat1 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_split[i,k,]) == 0]
dat1[[i]] = as_array(l2_split[i,k,][idx])
}
dat2 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p1[i,k,]) == 0]
dat2[[i]] = as_array(l2_p1[i,k,][idx])
}
dat3 = list()
for (i in 1:length(ns)) {
idx = (1:n_trial)[as_array(noselect_p2[i,k,]) == 0]
dat3[[i]] = as_array(l2_p2[i,k,][idx])
}
plot_metric(trial, ns, sigma_ys[k], metrics[5], dat1, dat2, dat3)
}
